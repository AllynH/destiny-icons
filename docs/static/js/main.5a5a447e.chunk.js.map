{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","fetch","headers","Authorization","then","response","json","catch","e","console","log","root","Promise","all","filter","i","type","name","map","d","a","url","files","f","download_url","text","file","trueContent","this","setState","className","id","key","src","window","btoa","alt","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAiGeA,G,kBA5Fb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,MAAM,GAJI,E,+MASOC,MAAM,oEAAqE,CAC5FC,QAAS,CACPC,cAAe,oDAGhBC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,K,cATVG,E,gBAYAC,QAAQC,IAAIF,EAAKG,OAAO,SAAAC,GAAC,MAAe,QAAXA,EAAEC,MAA6B,SAAXD,EAAEE,OAAiBC,IAAxD,sCAA4D,WAAMC,GAAN,eAAAC,EAAA,qEACxDnB,MAAMkB,EAAEE,IAAK,CAC/BnB,QAAS,CACPC,cAAe,oDAGhBC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,KAV4D,YACtEc,EADsE,wCAcpEV,QAAQC,IAAIS,EAAMJ,IAAN,sCAAU,WAAMK,GAAN,eAAAH,EAAA,qEACPnB,MAAMsB,EAAEC,cACxBpB,KAAK,SAAAC,GACJ,OAAOA,EAASoB,SAEjBlB,MAAM,SAAAC,GACLC,QAAQC,IAAIF,KANU,OACpBkB,EADoB,OASxBH,EAAEI,YAAcD,EATQ,yCAAV,wDAdwD,OA0B1EP,EAAEG,MAAQA,EA1BgE,yCAA5D,wD,OA8BlBb,QAAQC,IAAIC,EAAKG,OAAO,SAAAC,GAAC,MAAe,QAAXA,EAAEC,QAE/BY,KAAKC,SAAS,CACZ7B,KAAMW,EAAKG,OAAO,SAAAC,GAAC,MAAe,QAAXA,EAAEC,S,mIAK3B,OAAKY,KAAK7B,MAAMC,KAQZ,yBAAK8B,UAAU,OAAOC,GAAG,SACtBH,KAAK7B,MAAMC,KAAKkB,IAAI,SAACC,EAAGJ,GACvB,OACE,yBAAKiB,IAAKjB,EAAGe,UAAU,OACrB,4BAAKX,EAAEF,MACP,yBAAKa,UAAU,SACZX,EAAEG,MAAMJ,IAAI,SAACK,EAAGR,GAEf,OACE,yBAAKiB,IAAKjB,EAAGe,UAAU,QACrB,yBAAKG,IAAG,oCAA+BC,OAAOC,KAAKZ,EAAEI,cAAgBS,IAAKb,EAAEN,OAC5E,yBAAKa,UAAU,QAAQP,EAAEN,cAjBzC,yBAAKa,UAAU,OAAOC,GAAG,WACvB,2C,GA/DQM,IAAMC,YCQJC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC,iB","file":"static/js/main.5a5a447e.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: false\n    };\n  }\n\n  async componentDidMount() {\n    const root = await fetch(`https://api.github.com/repos/justrealmilk/destiny-icons/contents/`, {\n      headers: {\n        Authorization: 'token dd9c981789b0763fcc960f5b6f93cec10005a14a'\n      }\n    })\n      .then(response => {\n        return response.json();\n      })\n      .catch(e => {\n        console.log(e);\n      });\n\n    await Promise.all(root.filter(i => i.type === 'dir' && i.name !== 'docs').map(async d => {\n      const files = await fetch(d.url, {\n        headers: {\n          Authorization: 'token dd9c981789b0763fcc960f5b6f93cec10005a14a'\n        }\n      })\n        .then(response => {\n          return response.json();\n        })\n        .catch(e => {\n          console.log(e);\n        });\n\n      if (files) {\n        await Promise.all(files.map(async f => {\n          const file = await fetch(f.download_url)\n            .then(response => {\n              return response.text();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n\n            f.trueContent = file;\n        }));\n\n        d.files = files;\n      }\n    }));\n\n    console.log(root.filter(i => i.type === 'dir'))\n\n    this.setState({\n      data: root.filter(i => i.type === 'dir')\n    });\n  }\n\n  render() {\n    if (!this.state.data) {\n      return (\n        <div className='view' id='loading'>\n          <p>one sec</p>\n        </div>\n      );\n    } else {\n      return (\n        <div className='view' id='index'>\n          {this.state.data.map((d, i) => {\n            return (\n              <div key={i} className='dir'>\n                <h2>{d.name}</h2>\n                <div className='files'>\n                  {d.files.map((f, i) => {\n\n                    return (\n                      <div key={i} className='file'>\n                        <img src={`data:image/svg+xml;base64,${window.btoa(f.trueContent)}`} alt={f.name} />\n                        <div className='name'>{f.name}</div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}